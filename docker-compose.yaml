services:
  # Listing Database service
  listing-db:
    image: mysql:8.0
    container_name: listing_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-password}
      MYSQL_DATABASE: listing_db
    ports:
      - "3306:3306"
    volumes:
      - listing_mysql_data:/var/lib/mysql
      - ./listing_db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - organ_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-password}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Bidding Database service
  bidding-db:
    image: mysql:8.0
    container_name: bidding_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-password}
      MYSQL_DATABASE: bidding_db
    command: --port=3307  # Make MySQL listen on port 3307
    ports:
      - "3307:3307"
    volumes:
      - bidding_mysql_data:/var/lib/mysql
      - ./bidding_db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - organ_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-password}", "--port=3307"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Listing Microservice
  list-service:
    build: ./list-service
    container_name: list_service
    restart: always
    depends_on:
      listing-db:
        condition: service_healthy
    environment:
      DB_HOST: listing-db
      DB_PORT: 3306
      DB_USER: root
      DB_PASSWORD: ${MYSQL_ROOT_PASSWORD:-password}
      DB_NAME: listing_db
      NODE_ENV: ${NODE_ENV:-development}
      LISTING_SERVICE_URL: http://list-service:3001
      RESOLUTION_INTERVAL_MINUTES: 5
    ports:
      - "3001:3001"
    networks:
      - organ_network
    volumes:
      - ./list-service:/app
      - /app/node_modules

  # Bidding Microservice
  bid-service:
    build: ./bid-service
    container_name: bid_service
    restart: always
    depends_on:
      bidding-db:
        condition: service_healthy
    environment:
      DB_HOST: bidding-db
      DB_PORT: 3307
      DB_USER: root
      DB_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      DB_NAME: bidding_db
      NODE_ENV: ${NODE_ENV:-development}
      BIDDING_SERVICE_URL: http://bid-service:3002
      LISTING_SERVICE_URL: http://list-service:3001
    ports:
      - "3002:3002"
    networks:
      - organ_network
    volumes:
      - ./bid-service:/app
      - /app/node_modules

  # View Listing Bids Composite Microservice (Python)
  view-listing-bids-service:
    build: ./view-listing-bids-service
    container_name: view_listing_bids_service
    restart: always
    depends_on:
      - list-service
      - bid-service
    environment:
      LISTING_SERVICE_URL: http://list-service:3001
      BIDDING_SERVICE_URL: http://bid-service:3002
    ports:
      - "5001:5001"
    networks:
      - organ_network
    volumes:
      - ./view-listing-bids-service:/app

  kong:
    image: kong:latest
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    volumes:
      - ./kong/kong.yml:/kong/kong.yml
    ports:
      - "8000:8000"  # Kong proxy
      - "8001:8001"  # Kong admin
    networks:
      - organ_network
  # Frontend Application (HTML-based)
  frontend:
    build: ./frontend-html
    container_name: frontend
    restart: always
    depends_on:
      - list-service
      - bid-service
      - view-listing-bids-service
    ports:
      - "3000:3000"
    networks:
      - organ_network

    # For development, you can uncomment this volume to make instant changes without rebuilding
    volumes:
      - ./frontend-html:/usr/share/nginx/html:ro

  notification:
    build: ./notification
    container_name: notification
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=production
      - KAFKA_BROKERS=kafka:9092
      - DIRECT_NOTIFICATION_URL=http://push-notification-service:3005/send
    volumes:
      - ./notification:/app
      - /app/node_modules
    networks:
      - organ_network
    restart: unless-stopped
    depends_on:
      - kafka

  # Kafka and Zookeeper services
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - organ_network

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: "listing-events:1:1,notification-events:1:1"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - organ_network

  # For testing purposes only - simple push notification service
  push-notification-service:
    image: node:16-alpine
    container_name: push_notification_service
    working_dir: /app
    command: >
      sh -c "echo 'console.log(\"Starting mock push notification service...\");
      const express = require(\"express\");
      const app = express();
      app.use(express.json());
      app.post(\"/send\", (req, res) => {
        console.log(\"Mock push notification sent:\", req.body);
        res.json({success: true, message: \"Notification sent\", timestamp: new Date()});
      });
      app.post(\"/push\", (req, res) => {
        console.log(\"Mock push notification sent:\", req.body);
        res.json({success: true, message: \"Push notification sent\", timestamp: new Date()});
      });
      app.listen(3005, () => console.log(\"Mock push notification service running on port 3005\"));' > index.js && 
      npm init -y && 
      npm install express && 
      node index.js"
    ports:
      - "3005:3005"
    networks:
      - organ_network

networks:
  organ_network:
    driver: bridge

volumes:
  listing_mysql_data:
  bidding_mysql_data: